<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mobile | Peter Boni]]></title>
  <link href="http://www.peterboni.net/blog/categories/mobile/atom.xml" rel="self"/>
  <link href="http://www.peterboni.net/"/>
  <updated>2013-12-07T10:41:23+08:00</updated>
  <id>http://www.peterboni.net/</id>
  <author>
    <name><![CDATA[Peter Boni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iHealth Renaissance: Change Your Body & Mind One App at a Time]]></title>
    <link href="http://www.peterboni.net/blog/2013/10/01/ihealth-renaissance/"/>
    <updated>2013-10-01T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/10/01/ihealth-renaissance</id>
    <content type="html"><![CDATA[<p><img class="fancybox center" src="/media/images/2013-10-01-ihealth-renaissance/IMG_1181.jpg" width="640" height="365" title="iHealth" ></p>

<p>I have experienced a personal health renaissance over the last year. My iPhone<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> is teaching me how to change my health, both body &amp; mind. It has offered motivation when I needed it. I believe that the iHealth Renaissance is just getting started. It could do the same for you if you let it. Let me explain how.</p>

<!--more-->


<p>It all started innocently enough on January 1, 2013 when I installed the first health app on my iPhone &ndash; RunKeeper, that I had heard about from a friend. I didn&rsquo;t think I was <em>that</em> unfit as I cycled regularly, and was able to do 80km rides at a decent pace. I wanted to try something different, and decided to try running as I had never been a runner. I actually didn&rsquo;t like it as I thought that I couldn&rsquo;t do it &ndash; that I wasn&rsquo;t built for it. I&rsquo;m 189 cm (6 feet 2.4 inches), and was about 98 kg. Overweight for sure, but at the time not really concerned about it. My first run was the day after, January 2 when I ran 2.55 km at a pace of 6:42 per km, on a completely flat course.</p>

<p>RunKeeper gave me all sorts of rich feedback. Realtime audio feedback on my run. Visual statistics after my run &amp; of all previous runs. I could easily hear, see &amp; track my progress. The social networking that was built in took the feedback to the next level. Likes &amp; comments on my runs, as well as being able to view friends runs, combined with the leaderboard, gave me more motivation. I was really <a href="/blog/categories/running/">enjoying running</a>. I wasn&rsquo;t conscious of why I kept coming back &amp; using RunKeeper until I experienced a talk from <a href="http://drjasonfox.com/">Dr Jason Fox</a> (a &lsquo;motivation strategy &amp; design expert&rsquo;) at a technology conference later in the year.</p>

<blockquote><p>RunKeeper had designed running to be inherently motivating. It reduced the latency between the effort &amp; feedback. It enhanced the visibility of, and gave me a clear sense of progress. The more visible my progress, the more motivated I became. The more I ran.</p></blockquote>

<p>After RunKeeper came Strava for my cycling. I think RunKeeper supported cycling as a different activity type but I knew friends using Strava for cycling. If you were around and using the Internet in the late 90s you will remember ICQ starting the IM (Instant Messaging) wars. Some friends were on RunKeeper, and some were on Strava. I was stuck with both, which really means three apps, as Strava has two &ndash; one for cycling and one for running. All this cardio meant that weights were next. Thoughts of figuring out how to do the exercises properly again, and setting up &amp; recording scheduled routines did not motivate me at all. That&rsquo;s when a friend put me on to GymGoal 2 which managed it all for me, and gave me visual help &amp; feedback.</p>

<p>With 4 fitness apps installed &amp; being used regularly next came changing what I put into my body. My wife installed &amp; started using MyNetDiary which is essentially calorie counting, with once again, plenty of feedback that gave me a sense of progress. I could visually see how many calories I was consuming against how many I should consume to meet my target weight. What it did more than that though was teach me about what I was eating. I was shocked at a few things, for example almonds &hellip; holy crap! It hasn&rsquo;t changed what I eat, as I still enjoy beer &amp; chocolate, but it has changed my behaviour. I now think about the quality &amp; quantity of what I will put into my body.</p>

<p><img class="fancybox center" src="/media/images/2013-10-01-ihealth-renaissance/IMG_1137.jpg" width="500" height="500" title="Breakfast" ></p>

<p>With 5 health apps installed &amp; being used regularly I started seeing changes. 8 months of running, and 1.5 months of changing the way I eat I had dropped over 8 kg in weight, and could now comfortably run 5 km at a pace of 5:30 per km, with nice steep hills thrown in.</p>

<p>There are two more health apps that I have installed &amp; started using. The first one I came across when I read an article <a href="http://well.blogs.nytimes.com/2013/05/09/the-scientific-7-minute-workout/">The Scientific 7-Minute Workout</a>. I thought that it would come in handy when I was short on time, and also as a good way to shake things up. Check out the &lsquo;7 Minute Workout &ldquo;Seven&rdquo;&rsquo; app. The last one I came across when I read a Lifehacker article <a href="http://lifehacker.com/what-happens-to-the-brain-when-you-meditate-and-how-it-1202533314">What Happens to the Brain When You Meditate (And How it Benefits You)</a>, that recommended an app created by a former Buddhist monk called <a href="http://www.getsomeheadspace.com/">Headspace</a>. Check out the app &lsquo;Headspace&rsquo;, it&rsquo;s meditation when &amp; where you have the time, which for me is on my way to work on the bus. I&rsquo;m really excited about giving meditation a go, and Headspace was built for the iHealth Renaissance.</p>

<p>I now have 7 health apps installed &amp; being used, which is the majority category of apps that I use on my iPhone. I haven&rsquo;t used a Nike+ Fuelband, Jawbone UP, or a Fitbit Flex, but I can see that the iHealth Renaissance is just starting, and that these are just early wearable accessory products.</p>

<p>It&rsquo;s frustrating that I need multiple apps for the same thing, and also that I need to enter the same information into different apps. For example most of the health apps want to know my gender, age, height &amp; weight, to be able to provide me meaningful feedback. Why do I need to provide my data multiple times?</p>

<p>It&rsquo;s interesting looking at the move Apple has made with the iPhone 5s, by introducing a motion coprocessor called the M7, which continuously measures motion data &amp; makes it available for apps. I can&rsquo;t wait for the next generation of iHealth apps &amp; wearable accessory products. I think we still need wearable accessory products as apps are tucked away nicely on your iPhone. You choose when to interact with them. We need devices that we can see that constantly motivate us. Devices that further reduce the latency between effort &amp; feedback in an effortless, visual, motivational way. I think that these devices will still be accessory products that augment the core richer connected experience that can be delivered via your iPhone.</p>

<p>So the iHealth Renaissance is making good progress, but where is the iWealth Renaissance? The current batch of mobile apps from the financial services industry are primarily sales &amp; service based. Buy this product. View &amp; manage your accounts. They haven&rsquo;t started to take the next step.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>I use an iPhone. I use the term iPhone in this article to mean smartphone, or what I think of as a native Internet mobile personal assistant &amp; augmentation device.<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design: Little Things Matter]]></title>
    <link href="http://www.peterboni.net/blog/2013/09/22/design-little-things-matter/"/>
    <updated>2013-09-22T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/09/22/design-little-things-matter</id>
    <content type="html"><![CDATA[<p>I like running &amp; listening to music using my iPhone. Up until recently I was using Sennheiser In-Ear Headphones without a remote or microphone. The headphones caused me a few problems before I finally decided to buy new headphones, which made me think about design.</p>

<!--more-->


<p>The first problem with my current headphones was that even though they were in-ear, they kept falling out, which was really annoying. The second problem was that I couldn&rsquo;t forward songs. Listening to a slow or uninspiring song approaching a hill is hard work. The third problem sometimes occurred with an incoming message. Fumbling to get the iPhone out of my <a href="http://www.spibelt.com.au">SPI Belt</a> &amp; read the message while running (to see if it was urgent) was difficult.</p>

<p>I did a quick review of headphones with remote &amp; microphone in the Apple Store and purchased the Sennheiser OCX 685i In-Ear Sports Headphones.</p>

<p><img class="fancybox center" src="/media/images/2013-09-22-design-little-things-matter/IMG_2357.jpg" width="600" height="400" title="Sennheiser OCX 685i In-Ear Sports Headphones" ></p>

<p>The ear clip design, combined with the lightweight cord &amp; clip means that they stay secure while running. No more falling out. The remote &amp; microphone work &ndash; I have full control over music. I can also use Siri to listen to incoming messages, and dictate a reply. I can even use Siri to <a href="https://twitter.com/peterboni/status/379924494527131649">Tweet</a>. The headphones are also sweat &amp; water resistant. Nearly perfect.</p>

<blockquote><p>The only problem I have with them is the <em>design</em> of the remote, which detracts from the overall experience of using the product.</p></blockquote>

<p>Compare the design of the remote on the Sennheiser in the above picture to the remote on the Apple EarPods in the below picture.</p>

<p><img class="fancybox center" src="/media/images/2013-09-22-design-little-things-matter/IMG_2360.jpg" width="600" height="400" title="Apple EarPods with Remote and Mic" ></p>

<p>Can you guess what the problem is? When I&rsquo;m running &amp; listening to music, I&rsquo;m watching the road ahead. I move my fingers to the remote near my neck, grab it, and feel for the controls. They&rsquo;re all placed together &amp; feel like they blend into each other. It feels like one button. This is the exact opposite experience with the Apple EarPods remote. On the Apple EarPods remote the clear indent in the middle means I feel immediately by touch the distinction between the 3 buttons, and hence how to activate the different functions that the 3 buttons enable.</p>

<p>I was reading this article today &ndash; <a href="http://www.businessweek.com/articles/2013-09-20/apple-ceo-tim-cooks-complete-interview-with-bloomberg-businessweek">Tim Cook: The Complete Interview</a>, and there are a few really good quotes from Tim Cook that I think are relevant.</p>

<blockquote><p>&lsquo;We’re a product company, and so the products show the values of a company. They speak to innovation. They speak to caring about every detail. They’re a reminder of how incredibly important experience is &hellip; every detail has been thought through. The experience is an “Aha” moment.&rsquo;</p></blockquote>

<p>And then this one.</p>

<blockquote><p>&lsquo;Nobody worries about buttons and finishes. Nobody really worries about the experience, and we do. We’re really proud that we do.&rsquo;</p></blockquote>

<p>Design is important, and only going to become more so &ndash; <a href="http://www.fastcodesign.com/3017485/the-3-future-waves-in-design-and-how-to-ride-them">The 3 Future Waves In Design, And How To Ride Them</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Formatted Currency Input]]></title>
    <link href="http://www.peterboni.net/blog/2013/07/04/ios-formatted-currency-input/"/>
    <updated>2013-07-04T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/07/04/ios-formatted-currency-input</id>
    <content type="html"><![CDATA[<p>You&rsquo;re building an iOS app, and need the user to enter a money value. You start by using
a UITextField. If you want a basic user experience, then you&rsquo;re done.</p>

<p>If you want to give the user <em>something better</em>, then the pain begins. The pain is worth
it because <strong>small details matter</strong>. I&rsquo;ve taken ideas from a few places &amp; combined them
into this experience &amp; open source code.</p>

<!--more-->


<h2>The Experience in 9 images</h2>

<p>1. We start &amp; sit there, begging the user to enter something. We&rsquo;re showing $0.00, so we have
sent a signal to them that they are entering a money value. The cursor is flashing at them
after the last 0 at the end of the formatted money value.</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/1.png" width="396" height="744" title="Start, Shows $0.00" ></p>

<p>2. The user taps the 1 key on the number pad. The display value changes to $0.01</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/2.png" width="396" height="744" title="Tap 1, Changes to $0.01" ></p>

<p>3. The user taps the 2 key on the number pad. The display value changes to $0.12</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/3.png" width="396" height="744" title="Tap 2, Changes to $0.12" ></p>

<p>4. The user taps the 3 key on the number pad. The display value changes to $1.23</p>

<p>They haven&rsquo;t had to enter in a dot. They are just tapping numbers, and the displayed
money value is formatting itself in front of their eyes.</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/4.png" width="396" height="744" title="Tap 3, Changes to $1.23" ></p>

<p>5. The user taps some more numbers &ndash; 4, 5, and then 6. The display value changes to $1,234.56</p>

<p>We have a comma! The money value is formatted.</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/5.png" width="396" height="744" title="Tap 4, 5, 6, Changes to $1,234.56" ></p>

<p>6. The user taps Delete. The display value changes to $123.45</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/6.png" width="396" height="744" title="Tap Delete, Deletes 6" ></p>

<p>7. The user moves the cursor to after 1, taps Delete. The display value changes to $23.45</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/7.png" width="396" height="744" title="Move cursor to after 1, and Tap Delete, Deletes 1" ></p>

<p>8. From start the user gets ready to paste in &lsquo;$1,000&rsquo; (without quotes) from somewhere else.</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/8.png" width="396" height="744" title="From Start, Get ready to Paste $1,000" ></p>

<p>9. The &lsquo;$1,000&rsquo; gets pasted in &amp; the display value changes to $1,000.00.</p>

<p>Note that the display value didn&rsquo;t change to $10.00, which would have happened if we
didn&rsquo;t trap the paste and format the value before updating the display value.</p>

<p>Also note that the user could also paste in &lsquo;1000&rsquo; or &lsquo;$1000&rsquo;.</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/9.png" width="396" height="744" title="Paste in $1,000, Changes to $1,000.00" ></p>

<h2>The Code</h2>

<p>Go get it &ndash; <a href="https://github.com/peterboni/FormattedCurrencyInput">FormattedCurrencyInput on GitHub</a>.<br/>
Fork it, or submit a Pull Request, and let&rsquo;s make it better for others together!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 Dynamic Type]]></title>
    <link href="http://www.peterboni.net/blog/2013/06/29/ios-7-dynamic-type/"/>
    <updated>2013-06-29T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/06/29/ios-7-dynamic-type</id>
    <content type="html"><![CDATA[<p>iOS 7 introduces Dynamic Type, which if apps choose to support it, gives the user
control over text size in an app. Web pages have had this feature for free since the early
days of the web, but web browsers moved away from dynamic text sizing.
<a href="http://www.codinghorror.com/blog/2009/01/the-two-types-of-browser-zoom.html">The Two Types of Browser Zoom</a>.</p>

<p>iOS7 Dynamic Type automatically adjusts weight, letter spacing, and line height for every font
size. It looks <strong>stunning</strong>, but there&rsquo;s work to make your app support it.</p>

<!--more-->


<h2>Default Size</h2>

<p>Here&rsquo;s what <a href="/blog/2013/06/24/ios-7-userxlistview/">UserXListView</a> looks like with the Text Size
(Settings &ndash; General &ndash; Text Size) set to the default size in the <em>iPhone Retina (3.5-inch)</em>
iOS Simulator.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/1-text-size-normal.png" width="500" height="713" title="Text Size Default" ></p>

<p>We get 3 &amp; &lsquo;a bit&rsquo; cells in the UITableView.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/2-UserXListView-normal.png" width="500" height="713" title="UserXListView Default" ></p>

<h2>Smallest Size</h2>

<p>Changing the Text Size to the smallest size means we can fit slightly more.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/3-text-size-small.png" width="500" height="713" title="Text Size Smallest" ></p>

<p>Nearly 4 cells in the UITableView.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/4-UserXListView-small.png" width="500" height="713" title="UserXListView Smallest" ></p>

<h2>Largest Size</h2>

<p>Changing the Text Size to the largest size means we can fit slightly less, but get big
beautiful type.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/5-text-size-large.png" width="500" height="713" title="Text Size Largest" ></p>

<p>3 cells in the UITableView.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/6-UserXListView-large.png" width="500" height="713" title="UserXListView Largest" ></p>

<h2>Implementation, The Easy Part</h2>

<p>That&rsquo;s how it looks, but how hard is it to make your app support it. Let&rsquo;s look at
<a href="/blog/2013/06/24/ios-7-userxlistview/">UserXListView</a>. The cell layout makes use of Auto
Layout Constraints, which are very powerful.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/7-UserXListView-cell-layout.png" width="381" height="674" title="UserXListView Cell Layout" ></p>

<p>iOS 7 has defined Text Styles &ndash; Body, Caption 1, Caption 2, Footnote, Headline 1,
Headline 2, Subhead 1, and Subhead 2. We assign a Text Style to each label in the cell
layout via the attribute inspector as shown below.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/8-UserXListView-cell-label-attribute-inspector.png" width="316" height="196" title="UserXListView Cell Label Attribute Inspector" ></p>

<p>Once the label Text Styles &amp; Auto Layout Constraints are set, we&rsquo;re ready for the hard
part.</p>

<h2>Implementation, The Hard Part</h2>

<p>Unlike Auto Layout in this example, there&rsquo;s more work to do to support
Dynamic Type.</p>

<p>We need to make the Controller aware of a Text Size change by hooking into the
UIContentSizeCategoryDidChangeNotification.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">preferredContentSizeChanged:</span><span class="p">)</span> <span class="nl">name:</span><span class="n">UIContentSizeCategoryDidChangeNotification</span> <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">preferredContentSizeChanged:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="n">aNotification</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// adjust the layout of the cells</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="n">setNeedsLayout</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// refresh view&amp;hellip;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p>We need to calculate the height of the row/cell based on it&rsquo;s content, and as each label
in the cell can change height we need to calculate the total height of the cell required.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">heightForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">indexPath</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Account</span> <span class="o">*</span><span class="n">account</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="nl">objectAtIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIFont</span> <span class="o">*</span><span class="n">nameLabelFont</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">preferredFontForTextStyle:</span><span class="n">UIFontTextStyleHeadline1</span><span class="p">];</span>
</span><span class='line'><span class="n">CGSize</span> <span class="n">nameLabelFontSize</span> <span class="o">=</span> <span class="p">[[</span><span class="n">account</span> <span class="n">name</span><span class="p">]</span> <span class="nl">sizeWithAttributes:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObject:</span><span class="n">nameLabelFont</span> <span class="nl">forKey:</span><span class="n">NSFontAttributeName</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">PADDING_OUTER</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">totalHeight</span> <span class="o">=</span> <span class="n">PADDING_OUTER</span> <span class="o">+</span> <span class="n">nameLabelFontSize</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="p">...</span> <span class="o">+</span> <span class="n">PADDING_OUTER</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">totalHeight</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We also need to programmatically assign (or re-assign because we already did it in
the Storyboard) the cell label Text Style values.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">AccountCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">(</span><span class="n">AccountCell</span> <span class="o">*</span><span class="p">)[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="s">@&quot;AccountCell&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Account</span> <span class="o">*</span><span class="n">account</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="nl">objectAtIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">nameLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">account</span> <span class="n">name</span><span class="p">];</span>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">nameLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">preferredFontForTextStyle:</span><span class="n">UIFontTextStyleHeadline1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Final Thoughts</h2>

<p>That&rsquo;s it. iOS 7 determines &amp; applies the font attributes for each label based on the
Text Style for each label, and the iOS 7 Text Size system setting selected by the user,
and it&rsquo;s left to us (the developer) to cater for the changes in the layout to the view.</p>

<p>As you can see there&rsquo;s a bit of extra work to support Dynamic Type. It would be nice if
it was a bit smarter, a bit more automatic, but with great power comes great responsibility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 UserXListView]]></title>
    <link href="http://www.peterboni.net/blog/2013/06/24/ios-7-userxlistview/"/>
    <updated>2013-06-24T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/06/24/ios-7-userxlistview</id>
    <content type="html"><![CDATA[<p>I believe the best way to understand something is to get your hands dirty, so I decided
to build the front end part of an app idea that I&rsquo;ve had for a while as an iOS 7 app.</p>

<p>While using iOS 7 for the last week or so, I&rsquo;ve been thinking about the UI &amp; UX.
Of course, Metro (design language) has been around for a while thanks to Microsoft, but
the Metro apps I&rsquo;ve used feel dull. iOS 7 feels surprisingly refreshing.</p>

<!--more-->


<p>One of the views in the app I&rsquo;m building needs a list of <em>things</em> that the user creates &ndash;
a typical pattern in many apps. iOS has a UITableViewController, so technically it&rsquo;s an
easy problem to solve. In terms of the design of the UI &amp; UX it&rsquo;s a little bit more complicated.</p>

<p>Let me talk you through what I call the UserXListView&trade; pattern in 7 images of the
iOS 7 app I&rsquo;ve started building.</p>

<h2>1. Empty List View</h2>

<p>Ok. We have a list view. That + in the top right corner is staring at her.
Tap me! Tap me!</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-1-list-view.png" width="396" height="744" title="1. Empty List View" ></p>

<h2>2. Add Item (with default Icon &amp; Colour)</h2>

<p>She taps +. She knows that she&rsquo;s going to create something. What&rsquo;s the first
decision? What to name it? No. The first decision is an emotional one. What&rsquo;s this thing
going to look like.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-2-add-item.png" width="396" height="744" title="2. Add Item (with default Icon &amp; Colour)" ></p>

<p>Technically this is a modal segue; either Cancel and go back, or enter the required
information &amp; Save.</p>

<h2>3. Item Icon</h2>

<p>She taps Change Icon. This is where it gets interesting. The icons are in groups &amp; are
all black so that they are easy for her to judge equally. In this instance there&rsquo;s only one
group of simple icons from The Noun Project, that are visually related to the thing that
she is creating.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-3-icons.png" width="396" height="744" title="3. Item Icon" ></p>

<p>Once again this is a modal segue; either Cancel and go back, or give the required
information, which in this instance is selecting an icon. We use a UICollectionViewController
that&rsquo;s dynamic. We define the icon groups &amp; icons as follows.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">icons</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;The Noun Project&quot;</span><span class="p">,</span> <span class="s">@&quot;airplane&quot;</span><span class="p">,</span> <span class="s">@&quot;beachumbrella&quot;</span><span class="p">,</span> <span class="s">@&quot;bucket&quot;</span><span class="p">,</span> <span class="s">@&quot;car&quot;</span><span class="p">,</span> <span class="s">@&quot;cocktail&quot;</span><span class="p">,</span> <span class="s">@&quot;coins&quot;</span><span class="p">,</span> <span class="s">@&quot;college&quot;</span><span class="p">,</span> <span class="s">@&quot;creditcard&quot;</span><span class="p">,</span> <span class="s">@&quot;house&quot;</span><span class="p">,</span> <span class="s">@&quot;island&quot;</span><span class="p">,</span> <span class="s">@&quot;piggybank&quot;</span><span class="p">,</span> <span class="s">@&quot;rain&quot;</span><span class="p">,</span> <span class="s">@&quot;ring&quot;</span><span class="p">,</span> <span class="s">@&quot;sailboat&quot;</span><span class="p">,</span> <span class="s">@&quot;school&quot;</span><span class="p">,</span> <span class="s">@&quot;shoppingbag&quot;</span><span class="p">,</span> <span class="s">@&quot;smartcard&quot;</span><span class="p">,</span> <span class="s">@&quot;stroller&quot;</span><span class="p">,</span> <span class="s">@&quot;tree&quot;</span><span class="p">,</span> <span class="s">@&quot;umbrella&quot;</span><span class="p">,</span> <span class="s">@&quot;wallet&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">],</span>
</span><span class='line'>     <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>4. Item Icon Colour</h2>

<p>She taps the piggy bank icon (they&rsquo;re cute). Now she can personalise the icon even further
by selecting a colour from different groups of colour palettes. She can select a colour
from the same palette to match all her <em>things</em>, or mix &amp; match colours from different
colour palettes. The choice is hers. If she doesn&rsquo;t like the icon in any of these colours
she can either tap &lt; Icon, or as a nice feature of iOS 7, swipe left to right inside where
the icons are located and the view will slide off the top to the right and she will be taken
back to the black icons.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-4-colours.png" width="396" height="744" title="4. Item Icon Colour" ></p>

<p>This time we do a push segue. We use a UICollectionViewController that&rsquo;s dynamic, and some
Core Graphics help. In the app we only store one black piggy bank icon .png file, and at
runtime dynamically colour each piggy bank. We define the colour groups &amp; colours as follows.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>         <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;Winter Sunset&quot;</span><span class="p">,</span> <span class="s">@&quot;#A8AB9B&quot;</span><span class="p">,</span> <span class="s">@&quot;#172A38&quot;</span><span class="p">,</span> <span class="s">@&quot;#EC4B5D&quot;</span><span class="p">,</span> <span class="s">@&quot;#F48773&quot;</span><span class="p">,</span> <span class="s">@&quot;#E0C590&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">],</span>
</span><span class='line'>         <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;Ocean Five&quot;</span><span class="p">,</span> <span class="s">@&quot;#00A0B0&quot;</span><span class="p">,</span> <span class="s">@&quot;#6A4A3C&quot;</span><span class="p">,</span> <span class="s">@&quot;#CC333F&quot;</span><span class="p">,</span> <span class="s">@&quot;#EB6841&quot;</span><span class="p">,</span> <span class="s">@&quot;#EDC951&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">],</span>
</span><span class='line'>     <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then do some magic with the black piggy bank icon with a helper.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">getIcon:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">iconName</span> <span class="nf">withColor:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">iconColorHex</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@.png&quot;</span><span class="p">,</span> <span class="n">iconName</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'><span class="n">CGContextClipToMask</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">rect</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">CGImage</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorFromHexCode:</span><span class="n">iconColorHex</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class='line'><span class="n">CGContextFillRect</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">rect</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">img</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageWithCGImage:</span><span class="n">img</span><span class="p">.</span><span class="n">CGImage</span> <span class="nl">scale:</span><span class="mf">1.0</span> <span class="nl">orientation:</span><span class="n">UIImageOrientationDownMirrored</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>5. Add Item (with selected Icon &amp; Colour)</h2>

<p>She taps the red piggy bank in the Ocean Five colour group, and is taken back to the
2. Add Item view, with her red piggy bank there waiting for her. She can now enter the
other information and tap Save.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-5-add-item.png" width="396" height="744" title="5. Add Item (with selected Icon &amp; Colour)" ></p>

<h2>6. Item in List View</h2>

<p>She taps Save, and her new red piggy bank is waiting for her in the list view. All that&rsquo;s
left to do is to add some more.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-6-list-view.png" width="396" height="744" title="6. Item in List View" ></p>

<h2>7. List View with Items</h2>

<p>As she looks at the list of her <em>things</em>, she instantly recognises &amp; associates with each
one, as it has her personal identifying touch.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-7-list-view-lots.png" width="396" height="744" title="7. List View with Items" ></p>

<p>As you can see it&rsquo;s easy to give the user power over their <em>things</em> by a simple mobile
UI &amp; UX pattern, hereby called the UserXListView&trade; pattern.</p>

<h2>Storyboard</h2>

<p>For reference here&rsquo;s how the views hang together in the Storyboard. Excluding the
UINavigationControlers we have a UITableViewController, UIViewController, and
two UICollectionViewControllers.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/storyboard.png" width="624" height="1" title="Xcode5 Storyboard" ></p>

<h2>Sources</h2>

<p><a href="http://en.wikipedia.org/wiki/Metro_(design_language)">Metro (design language)</a></p>

<p><a href="http://www.apple.com/au/ios/ios7/design/">iOS 7 Design</a></p>

<p>If you use resources, remember to do the right thing and attribute where required!</p>

<p><a href="http://thenounproject.com">The Noun Project</a></p>

<blockquote><p><a href="http://thenounproject.com/noun/beach-umbrella/#icon-No2020" target="_blank">Beach Umbrella</a> designed by <a href="http://thenounproject.com/____Lo" target="_blank">Laurent Patain</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/bucket/#icon-No2142" target="_blank">Bucket</a> designed by <a href="http://thenounproject.com/anandgrafiti" target="_blank">Anand A Nair</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/cocktail/#icon-No482" target="_blank">Cocktail</a>  from The Noun Project<br/>
<a href="http://thenounproject.com/noun/coins/#icon-No16888" target="_blank">Coins</a> designed by <a href="http://thenounproject.com/jevgeni.striganov" target="_blank">Jevgeni Striganov</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/credit-card/#icon-No14358" target="_blank">Credit Card</a> designed by <a href="http://thenounproject.com/Oppenlander" target="_blank">Brian Oppenlander</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/house/#icon-No6783" target="_blank">House</a> designed by <a href="http://thenounproject.com/olynleroy" target="_blank">Olyn LeRoy</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/island/#icon-No8624" target="_blank">Island</a> designed by <a href="http://thenounproject.com/Avalanche" target="_blank">Athena Manolopoulos</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/rain/#icon-No9400" target="_blank">Rain</a> designed by <a href="http://thenounproject.com/iconify" target="_blank">Scott Lewis</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/ring/#icon-No1118" target="_blank">Ring</a> designed by <a href="http://thenounproject.com/mimosa.cb" target="_blank">Christopher T. Howlett</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/sail-boat/#icon-No2026" target="_blank">Sail Boat</a> designed by <a href="http://thenounproject.com/____Lo" target="_blank">Laurent Patain</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/shopping-bag/#icon-No17663" target="_blank">Shopping Bag</a> designed by <a href="http://thenounproject.com/tinyxl" target="_blank">Erin Standley</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/smart-card/#icon-No1804" target="_blank">Smart Card</a> designed by <a href="http://thenounproject.com/andrewforrester" target="_blank">Andrew Forrester</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/stroller/#icon-No601" target="_blank">Stroller</a>  from The Noun Project<br/>
<a href="http://thenounproject.com/noun/umbrella/#icon-No142" target="_blank">Umbrella</a>  from The Noun Project<br/>
<a href="http://thenounproject.com/noun/wallet/#icon-No3055" target="_blank">Wallet</a> designed by <a href="http://thenounproject.com/hakan" target="_blank">Hakan Yalcin</a> from The Noun Project</p></blockquote>

<p><a href="http://www.colourlovers.com">COLOURlovers</a></p>
]]></content>
  </entry>
  
</feed>
