<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: UI | Peter Boni]]></title>
  <link href="http://www.peterboni.net/blog/categories/ui/atom.xml" rel="self"/>
  <link href="http://www.peterboni.net/"/>
  <updated>2013-09-01T16:33:20+08:00</updated>
  <id>http://www.peterboni.net/</id>
  <author>
    <name><![CDATA[Peter Boni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS Formatted Currency Input]]></title>
    <link href="http://www.peterboni.net/blog/2013/07/04/ios-formatted-currency-input/"/>
    <updated>2013-07-04T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/07/04/ios-formatted-currency-input</id>
    <content type="html"><![CDATA[<p>You&rsquo;re building an iOS app, and need the user to enter a money value. You start by using
a UITextField. If you want a basic user experience, then you&rsquo;re done.</p>

<p>If you want to give the user <em>something better</em>, then the pain begins. The pain is worth
it because <strong>small details matter</strong>. I&rsquo;ve taken ideas from a few places &amp; combined them
into this experience &amp; open source code.</p>

<!--more-->


<h2>The Experience in 9 images</h2>

<p>1. We start &amp; sit there, begging the user to enter something. We&rsquo;re showing $0.00, so we have
sent a signal to them that they are entering a money value. The cursor is flashing at them
after the last 0 at the end of the formatted money value.</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/1.png" width="396" height="744" title="Start, Shows $0.00" ></p>

<p>2. The user taps the 1 key on the number pad. The display value changes to $0.01</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/2.png" width="396" height="744" title="Tap 1, Changes to $0.01" ></p>

<p>3. The user taps the 2 key on the number pad. The display value changes to $0.12</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/3.png" width="396" height="744" title="Tap 2, Changes to $0.12" ></p>

<p>4. The user taps the 3 key on the number pad. The display value changes to $1.23</p>

<p>They haven&rsquo;t had to enter in a dot. They are just tapping numbers, and the displayed
money value is formatting itself in front of their eyes.</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/4.png" width="396" height="744" title="Tap 3, Changes to $1.23" ></p>

<p>5. The user taps some more numbers &ndash; 4, 5, and then 6. The display value changes to $1,234.56</p>

<p>We have a comma! The money value is formatted.</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/5.png" width="396" height="744" title="Tap 4, 5, 6, Changes to $1,234.56" ></p>

<p>6. The user taps Delete. The display value changes to $123.45</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/6.png" width="396" height="744" title="Tap Delete, Deletes 6" ></p>

<p>7. The user moves the cursor to after 1, taps Delete. The display value changes to $23.45</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/7.png" width="396" height="744" title="Move cursor to after 1, and Tap Delete, Deletes 1" ></p>

<p>8. From start the user gets ready to paste in &lsquo;$1,000&rsquo; (without quotes) from somewhere else.</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/8.png" width="396" height="744" title="From Start, Get ready to Paste $1,000" ></p>

<p>9. The &lsquo;$1,000&rsquo; gets pasted in &amp; the display value changes to $1,000.00.</p>

<p>Note that the display value didn&rsquo;t change to $10.00, which would have happened if we
didn&rsquo;t trap the paste and format the value before updating the display value.</p>

<p>Also note that the user could also paste in &lsquo;1000&rsquo; or &lsquo;$1000&rsquo;.</p>

<p><img class="fancybox center" src="/media/images/2013-07-04-ios-formatted-currency-input/9.png" width="396" height="744" title="Paste in $1,000, Changes to $1,000.00" ></p>

<h2>The Code</h2>

<p>Go get it &ndash; <a href="https://github.com/peterboni/FormattedCurrencyInput">FormattedCurrencyInput on GitHub</a>.<br/>
Fork it, or submit a Pull Request, and let&rsquo;s make it better for others together!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 Dynamic Type]]></title>
    <link href="http://www.peterboni.net/blog/2013/06/29/ios-7-dynamic-type/"/>
    <updated>2013-06-29T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/06/29/ios-7-dynamic-type</id>
    <content type="html"><![CDATA[<p>iOS 7 introduces Dynamic Type, which if apps choose to support it, gives the user
control over text size in an app. Web pages have had this feature for free since the early
days of the web, but web browsers moved away from dynamic text sizing.
<a href="http://www.codinghorror.com/blog/2009/01/the-two-types-of-browser-zoom.html">The Two Types of Browser Zoom</a>.</p>

<p>iOS7 Dynamic Type automatically adjusts weight, letter spacing, and line height for every font
size. It looks <strong>stunning</strong>, but there&rsquo;s work to make your app support it.</p>

<!--more-->


<h2>Default Size</h2>

<p>Here&rsquo;s what <a href="/blog/2013/06/24/ios-7-userxlistview/">UserXListView</a> looks like with the Text Size
(Settings &ndash; General &ndash; Text Size) set to the default size in the <em>iPhone Retina (3.5-inch)</em>
iOS Simulator.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/1-text-size-normal.png" width="500" height="713" title="Text Size Default" ></p>

<p>We get 3 &amp; &lsquo;a bit&rsquo; cells in the UITableView.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/2-UserXListView-normal.png" width="500" height="713" title="UserXListView Default" ></p>

<h2>Smallest Size</h2>

<p>Changing the Text Size to the smallest size means we can fit slightly more.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/3-text-size-small.png" width="500" height="713" title="Text Size Smallest" ></p>

<p>Nearly 4 cells in the UITableView.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/4-UserXListView-small.png" width="500" height="713" title="UserXListView Smallest" ></p>

<h2>Largest Size</h2>

<p>Changing the Text Size to the largest size means we can fit slightly less, but get big
beautiful type.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/5-text-size-large.png" width="500" height="713" title="Text Size Largest" ></p>

<p>3 cells in the UITableView.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/6-UserXListView-large.png" width="500" height="713" title="UserXListView Largest" ></p>

<h2>Implementation, The Easy Part</h2>

<p>That&rsquo;s how it looks, but how hard is it to make your app support it. Let&rsquo;s look at
<a href="/blog/2013/06/24/ios-7-userxlistview/">UserXListView</a>. The cell layout makes use of Auto
Layout Constraints, which are very powerful.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/7-UserXListView-cell-layout.png" width="381" height="674" title="UserXListView Cell Layout" ></p>

<p>iOS 7 has defined Text Styles &ndash; Body, Caption 1, Caption 2, Footnote, Headline 1,
Headline 2, Subhead 1, and Subhead 2. We assign a Text Style to each label in the cell
layout via the attribute inspector as shown below.</p>

<p><img class="fancybox center" src="/media/images/2013-06-29-ios-7-dynamic-type/8-UserXListView-cell-label-attribute-inspector.png" width="316" height="196" title="UserXListView Cell Label Attribute Inspector" ></p>

<p>Once the label Text Styles &amp; Auto Layout Constraints are set, we&rsquo;re ready for the hard
part.</p>

<h2>Implementation, The Hard Part</h2>

<p>Unlike Auto Layout in this example, there&rsquo;s more work to do to support
Dynamic Type.</p>

<p>We need to make the Controller aware of a Text Size change by hooking into the
UIContentSizeCategoryDidChangeNotification.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="n">viewDidLoad</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="p">[</span><span class="n">super</span> <span class="n">viewDidLoad</span><span class="p">];</span>
</span><span class='line'><span class="p">[[</span><span class="n">NSNotificationCenter</span> <span class="n">defaultCenter</span><span class="p">]</span> <span class="nl">addObserver:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">preferredContentSizeChanged:</span><span class="p">)</span> <span class="nl">name:</span><span class="n">UIContentSizeCategoryDidChangeNotification</span> <span class="nl">object:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">preferredContentSizeChanged:</span><span class="p">(</span><span class="n">NSNotification</span> <span class="o">*</span><span class="p">)</span><span class="n">aNotification</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// adjust the layout of the cells</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="n">setNeedsLayout</span><span class="p">];</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="c1">// refresh view&amp;hellip;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p>We need to calculate the height of the row/cell based on it&rsquo;s content, and as each label
in the cell can change height we need to calculate the total height of the cell required.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="n">CGFloat</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">heightForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">indexPath</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">Account</span> <span class="o">*</span><span class="n">account</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="nl">objectAtIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIFont</span> <span class="o">*</span><span class="n">nameLabelFont</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">preferredFontForTextStyle:</span><span class="n">UIFontTextStyleHeadline1</span><span class="p">];</span>
</span><span class='line'><span class="n">CGSize</span> <span class="n">nameLabelFontSize</span> <span class="o">=</span> <span class="p">[[</span><span class="n">account</span> <span class="n">name</span><span class="p">]</span> <span class="nl">sizeWithAttributes:</span><span class="p">[</span><span class="n">NSDictionary</span> <span class="nl">dictionaryWithObject:</span><span class="n">nameLabelFont</span> <span class="nl">forKey:</span><span class="n">NSFontAttributeName</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">PADDING_OUTER</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="n">CGFloat</span> <span class="n">totalHeight</span> <span class="o">=</span> <span class="n">PADDING_OUTER</span> <span class="o">+</span> <span class="n">nameLabelFontSize</span><span class="p">.</span><span class="n">height</span> <span class="o">+</span> <span class="p">...</span> <span class="o">+</span> <span class="n">PADDING_OUTER</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">totalHeight</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>We also need to programmatically assign (or re-assign because we already did it in
the Storyboard) the cell label Text Style values.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">&amp;</span><span class="n">ndash</span><span class="p">;</span> <span class="p">(</span><span class="n">UITableViewCell</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nl">tableView:</span><span class="p">(</span><span class="n">UITableView</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="n">tableView</span> <span class="nl">cellForRowAtIndexPath:</span><span class="p">(</span><span class="n">NSIndexPath</span> <span class="o">*</span><span class="p">)</span><span class="n">indexPath</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">AccountCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="p">(</span><span class="n">AccountCell</span> <span class="o">*</span><span class="p">)[</span><span class="n">tableView</span> <span class="nl">dequeueReusableCellWithIdentifier:</span><span class="s">@&quot;AccountCell&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">Account</span> <span class="o">*</span><span class="n">account</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">fetchedResultsController</span> <span class="nl">objectAtIndexPath:</span><span class="n">indexPath</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">nameLabel</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="p">[</span><span class="n">account</span> <span class="n">name</span><span class="p">];</span>
</span><span class='line'><span class="n">cell</span><span class="p">.</span><span class="n">nameLabel</span><span class="p">.</span><span class="n">font</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIFont</span> <span class="nl">preferredFontForTextStyle:</span><span class="n">UIFontTextStyleHeadline1</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Final Thoughts</h2>

<p>That&rsquo;s it. iOS 7 determines &amp; applies the font attributes for each label based on the
Text Style for each label, and the iOS 7 Text Size system setting selected by the user,
and it&rsquo;s left to us (the developer) to cater for the changes in the layout to the view.</p>

<p>As you can see there&rsquo;s a bit of extra work to support Dynamic Type. It would be nice if
it was a bit smarter, a bit more automatic, but with great power comes great responsibility.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 UserXListView]]></title>
    <link href="http://www.peterboni.net/blog/2013/06/24/ios-7-userxlistview/"/>
    <updated>2013-06-24T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/06/24/ios-7-userxlistview</id>
    <content type="html"><![CDATA[<p>I believe the best way to understand something is to get your hands dirty, so I decided
to build the front end part of an app idea that I&rsquo;ve had for a while as an iOS 7 app.</p>

<p>While using iOS 7 for the last week or so, I&rsquo;ve been thinking about the UI &amp; UX.
Of course, Metro (design language) has been around for a while thanks to Microsoft, but
the Metro apps I&rsquo;ve used feel dull. iOS 7 feels surprisingly refreshing.</p>

<!--more-->


<p>One of the views in the app I&rsquo;m building needs a list of <em>things</em> that the user creates &ndash;
a typical pattern in many apps. iOS has a UITableViewController, so technically it&rsquo;s an
easy problem to solve. In terms of the design of the UI &amp; UX it&rsquo;s a little bit more complicated.</p>

<p>Let me talk you through what I call the UserXListView&trade; pattern in 7 images of the
iOS 7 app I&rsquo;ve started building.</p>

<h2>1. Empty List View</h2>

<p>Ok. We have a list view. That + in the top right corner is staring at her.
Tap me! Tap me!</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-1-list-view.png" width="396" height="744" title="1. Empty List View" ></p>

<h2>2. Add Item (with default Icon &amp; Colour)</h2>

<p>She taps +. She knows that she&rsquo;s going to create something. What&rsquo;s the first
decision? What to name it? No. The first decision is an emotional one. What&rsquo;s this thing
going to look like.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-2-add-item.png" width="396" height="744" title="2. Add Item (with default Icon &amp; Colour)" ></p>

<p>Technically this is a modal segue; either Cancel and go back, or enter the required
information &amp; Save.</p>

<h2>3. Item Icon</h2>

<p>She taps Change Icon. This is where it gets interesting. The icons are in groups &amp; are
all black so that they are easy for her to judge equally. In this instance there&rsquo;s only one
group of simple icons from The Noun Project, that are visually related to the thing that
she is creating.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-3-icons.png" width="396" height="744" title="3. Item Icon" ></p>

<p>Once again this is a modal segue; either Cancel and go back, or give the required
information, which in this instance is selecting an icon. We use a UICollectionViewController
that&rsquo;s dynamic. We define the icon groups &amp; icons as follows.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">icons</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>        <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;The Noun Project&quot;</span><span class="p">,</span> <span class="s">@&quot;airplane&quot;</span><span class="p">,</span> <span class="s">@&quot;beachumbrella&quot;</span><span class="p">,</span> <span class="s">@&quot;bucket&quot;</span><span class="p">,</span> <span class="s">@&quot;car&quot;</span><span class="p">,</span> <span class="s">@&quot;cocktail&quot;</span><span class="p">,</span> <span class="s">@&quot;coins&quot;</span><span class="p">,</span> <span class="s">@&quot;college&quot;</span><span class="p">,</span> <span class="s">@&quot;creditcard&quot;</span><span class="p">,</span> <span class="s">@&quot;house&quot;</span><span class="p">,</span> <span class="s">@&quot;island&quot;</span><span class="p">,</span> <span class="s">@&quot;piggybank&quot;</span><span class="p">,</span> <span class="s">@&quot;rain&quot;</span><span class="p">,</span> <span class="s">@&quot;ring&quot;</span><span class="p">,</span> <span class="s">@&quot;sailboat&quot;</span><span class="p">,</span> <span class="s">@&quot;school&quot;</span><span class="p">,</span> <span class="s">@&quot;shoppingbag&quot;</span><span class="p">,</span> <span class="s">@&quot;smartcard&quot;</span><span class="p">,</span> <span class="s">@&quot;stroller&quot;</span><span class="p">,</span> <span class="s">@&quot;tree&quot;</span><span class="p">,</span> <span class="s">@&quot;umbrella&quot;</span><span class="p">,</span> <span class="s">@&quot;wallet&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">],</span>
</span><span class='line'>     <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>4. Item Icon Colour</h2>

<p>She taps the piggy bank icon (they&rsquo;re cute). Now she can personalise the icon even further
by selecting a colour from different groups of colour palettes. She can select a colour
from the same palette to match all her <em>things</em>, or mix &amp; match colours from different
colour palettes. The choice is hers. If she doesn&rsquo;t like the icon in any of these colours
she can either tap &lt; Icon, or as a nice feature of iOS 7, swipe left to right inside where
the icons are located and the view will slide off the top to the right and she will be taken
back to the black icons.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-4-colours.png" width="396" height="744" title="4. Item Icon Colour" ></p>

<p>This time we do a push segue. We use a UICollectionViewController that&rsquo;s dynamic, and some
Core Graphics help. In the app we only store one black piggy bank icon .png file, and at
runtime dynamically colour each piggy bank. We define the colour groups &amp; colours as follows.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>         <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;Winter Sunset&quot;</span><span class="p">,</span> <span class="s">@&quot;#A8AB9B&quot;</span><span class="p">,</span> <span class="s">@&quot;#172A38&quot;</span><span class="p">,</span> <span class="s">@&quot;#EC4B5D&quot;</span><span class="p">,</span> <span class="s">@&quot;#F48773&quot;</span><span class="p">,</span> <span class="s">@&quot;#E0C590&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">],</span>
</span><span class='line'>         <span class="p">[</span><span class="n">NSArray</span> <span class="nl">arrayWithObjects:</span><span class="s">@&quot;Ocean Five&quot;</span><span class="p">,</span> <span class="s">@&quot;#00A0B0&quot;</span><span class="p">,</span> <span class="s">@&quot;#6A4A3C&quot;</span><span class="p">,</span> <span class="s">@&quot;#CC333F&quot;</span><span class="p">,</span> <span class="s">@&quot;#EB6841&quot;</span><span class="p">,</span> <span class="s">@&quot;#EDC951&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">],</span>
</span><span class='line'>     <span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then do some magic with the black piggy bank icon with a helper.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nf">getIcon:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">iconName</span> <span class="nf">withColor:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">iconColorHex</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">UIImage</span> <span class="o">*</span><span class="n">image</span> <span class="o">=</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageNamed:</span><span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@.png&quot;</span><span class="p">,</span> <span class="n">iconName</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGRect</span> <span class="n">rect</span> <span class="o">=</span> <span class="n">CGRectMake</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">height</span><span class="p">);</span>
</span><span class='line'><span class="n">UIGraphicsBeginImageContext</span><span class="p">(</span><span class="n">rect</span><span class="p">.</span><span class="n">size</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">CGContextRef</span> <span class="n">context</span> <span class="o">=</span> <span class="n">UIGraphicsGetCurrentContext</span><span class="p">();</span>
</span><span class='line'><span class="n">CGContextClipToMask</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">rect</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">CGImage</span><span class="p">);</span>
</span><span class='line'><span class="n">CGContextSetFillColorWithColor</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="p">[[</span><span class="n">UIColor</span> <span class="nl">colorFromHexCode:</span><span class="n">iconColorHex</span><span class="p">]</span> <span class="n">CGColor</span><span class="p">]);</span>
</span><span class='line'><span class="n">CGContextFillRect</span><span class="p">(</span><span class="n">context</span><span class="p">,</span> <span class="n">rect</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIImage</span> <span class="o">*</span><span class="n">img</span> <span class="o">=</span> <span class="n">UIGraphicsGetImageFromCurrentImageContext</span><span class="p">();</span>
</span><span class='line'><span class="n">UIGraphicsEndImageContext</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="p">[</span><span class="n">UIImage</span> <span class="nl">imageWithCGImage:</span><span class="n">img</span><span class="p">.</span><span class="n">CGImage</span> <span class="nl">scale:</span><span class="mf">1.0</span> <span class="nl">orientation:</span><span class="n">UIImageOrientationDownMirrored</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>5. Add Item (with selected Icon &amp; Colour)</h2>

<p>She taps the red piggy bank in the Ocean Five colour group, and is taken back to the
2. Add Item view, with her red piggy bank there waiting for her. She can now enter the
other information and tap Save.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-5-add-item.png" width="396" height="744" title="5. Add Item (with selected Icon &amp; Colour)" ></p>

<h2>6. Item in List View</h2>

<p>She taps Save, and her new red piggy bank is waiting for her in the list view. All that&rsquo;s
left to do is to add some more.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-6-list-view.png" width="396" height="744" title="6. Item in List View" ></p>

<h2>7. List View with Items</h2>

<p>As she looks at the list of her <em>things</em>, she instantly recognises &amp; associates with each
one, as it has her personal identifying touch.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/app-7-list-view-lots.png" width="396" height="744" title="7. List View with Items" ></p>

<p>As you can see it&rsquo;s easy to give the user power over their <em>things</em> by a simple mobile
UI &amp; UX pattern, hereby called the UserXListView&trade; pattern.</p>

<h2>Storyboard</h2>

<p>For reference here&rsquo;s how the views hang together in the Storyboard. Excluding the
UINavigationControlers we have a UITableViewController, UIViewController, and
two UICollectionViewControllers.</p>

<p><img class="fancybox center" src="/media/images/2013-06-24-ios-7-userxlistview/storyboard.png" width="624" height="1" title="Xcode5 Storyboard" ></p>

<h2>Sources</h2>

<p><a href="http://en.wikipedia.org/wiki/Metro_(design_language)">Metro (design language)</a></p>

<p><a href="http://www.apple.com/au/ios/ios7/design/">iOS 7 Design</a></p>

<p>If you use resources, remember to do the right thing and attribute where required!</p>

<p><a href="http://thenounproject.com">The Noun Project</a></p>

<blockquote><p><a href="http://thenounproject.com/noun/beach-umbrella/#icon-No2020" target="_blank">Beach Umbrella</a> designed by <a href="http://thenounproject.com/____Lo" target="_blank">Laurent Patain</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/bucket/#icon-No2142" target="_blank">Bucket</a> designed by <a href="http://thenounproject.com/anandgrafiti" target="_blank">Anand A Nair</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/cocktail/#icon-No482" target="_blank">Cocktail</a>  from The Noun Project<br/>
<a href="http://thenounproject.com/noun/coins/#icon-No16888" target="_blank">Coins</a> designed by <a href="http://thenounproject.com/jevgeni.striganov" target="_blank">Jevgeni Striganov</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/credit-card/#icon-No14358" target="_blank">Credit Card</a> designed by <a href="http://thenounproject.com/Oppenlander" target="_blank">Brian Oppenlander</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/house/#icon-No6783" target="_blank">House</a> designed by <a href="http://thenounproject.com/olynleroy" target="_blank">Olyn LeRoy</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/island/#icon-No8624" target="_blank">Island</a> designed by <a href="http://thenounproject.com/Avalanche" target="_blank">Athena Manolopoulos</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/rain/#icon-No9400" target="_blank">Rain</a> designed by <a href="http://thenounproject.com/iconify" target="_blank">Scott Lewis</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/ring/#icon-No1118" target="_blank">Ring</a> designed by <a href="http://thenounproject.com/mimosa.cb" target="_blank">Christopher T. Howlett</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/sail-boat/#icon-No2026" target="_blank">Sail Boat</a> designed by <a href="http://thenounproject.com/____Lo" target="_blank">Laurent Patain</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/shopping-bag/#icon-No17663" target="_blank">Shopping Bag</a> designed by <a href="http://thenounproject.com/tinyxl" target="_blank">Erin Standley</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/smart-card/#icon-No1804" target="_blank">Smart Card</a> designed by <a href="http://thenounproject.com/andrewforrester" target="_blank">Andrew Forrester</a> from The Noun Project<br/>
<a href="http://thenounproject.com/noun/stroller/#icon-No601" target="_blank">Stroller</a>  from The Noun Project<br/>
<a href="http://thenounproject.com/noun/umbrella/#icon-No142" target="_blank">Umbrella</a>  from The Noun Project<br/>
<a href="http://thenounproject.com/noun/wallet/#icon-No3055" target="_blank">Wallet</a> designed by <a href="http://thenounproject.com/hakan" target="_blank">Hakan Yalcin</a> from The Noun Project</p></blockquote>

<p><a href="http://www.colourlovers.com">COLOURlovers</a></p>
]]></content>
  </entry>
  
</feed>
