<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Dev | Peter Boni]]></title>
  <link href="http://www.peterboni.net/blog/categories/dev/atom.xml" rel="self"/>
  <link href="http://www.peterboni.net/"/>
  <updated>2014-06-07T10:21:17+08:00</updated>
  <id>http://www.peterboni.net/</id>
  <author>
    <name><![CDATA[Peter Boni]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PhotoArchive for iPhone]]></title>
    <link href="http://www.peterboni.net/blog/2014/02/15/photoarchive/"/>
    <updated>2014-02-15T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2014/02/15/photoarchive</id>
    <content type="html"><![CDATA[<blockquote><p>Update: PhotoArchive now has a permanent home.
For the latest information visit <a href="/photoarchive">PhotoArchive for iPhone, iPad..</a></p></blockquote>

<p>I take a lot of photos &amp; videos with my iPhone.
It&rsquo;s always with me, so it&rsquo;s convenient, and the quality is good.
My DSLR body &amp; lenses produce superior quality, but are usually left at home gathering dust.</p>

<p>When I take new photos or videos, often of my family, I worry that if something were to happen to my iPhone, those irreplaceable memories will be lost forever.</p>

<p>There are many solutions for this need, for example iCloud Backup, the Dropbox app, or the Amazon Cloud Drive app, but they all have varying costs &amp; limitations.
I wanted a simple solution for me, and that&rsquo;s why I decided to build an app as a side project &ndash; PhotoArchive for iPhone.
When released, PhotoArchive will be free for everyone on the App Store.</p>

<!--more-->


<h2>What it looks like</h2>

<div align="center">
<img src="http://www.peterboni.net/media/images/2014-02-15-photoarchive/iphone-black.png" class="nobox">
<img src="http://www.peterboni.net/media/images/2014-02-15-photoarchive/iphone-white.png" class="nobox">
</div>


<p></p>


<h2>What it does</h2>

<p>I have a Western Digital My Book NAS (Network Attached Storage) at home that is always on.
I use it for file storage for computers on the network, and DLNA streaming to the living room TV via the PS3.</p>

<p>I copy new photos &amp; videos from my &amp; my wife&rsquo;s iPhones by manually connecting them to a computer via USB, and downloading the new ones.
Because it&rsquo;s a tedious manual process I don&rsquo;t do it as often as I should.</p>

<p>What PhotoArchive does is copy new photos &amp; videos from your iOS device to an FTP server, over Wi-Fi.
The Western Digital My Book NAS, like most NAS, supports FTP (File Transfer Protocol).</p>

<p>This means that when I get home I can effortlessly back up new photos &amp; videos I&rsquo;ve taken that day &ndash; no turning on computers, no USB cables etc.</p>

<h2>What it does (marketing version)</h2>

<p>What does PhotoArchive do?</p>

<blockquote><p>PhotoArchive saves your irreplaceable memories, your photos &amp; videos from your iPhone, iPad, or iPod touch to your home storage over Wi-Fi.</p></blockquote>

<ol>
<li><p><strong>Save Time</strong> &ndash; Stop manually backing up your device to iTunes. Are you still using a USB cable? Stop manually backing up your photos &amp; videos by importing them into iPhoto. You may still import them into iPhoto, but you can do it when you have time, not when you have to &ndash; your photos &amp; videos are already safe!</p></li>
<li><p><strong>Save Money</strong> &ndash; Use iCloud Backup to back up everything except your Camera Roll, so there is no need to manually back up your device to iTunes. Turn off the Camera Roll from iCloud Backup, and stay under the 5.0 GB free limit.</p></li>
<li><p><strong>Archives</strong> &ndash; Does not synchronise. Will not download photos or videos from your home storage to your device.</p></li>
<li><p><strong>Never Deletes</strong> &ndash; Will never delete a photo or video from your home storage, or from your device.</p></li>
<li><p><strong>Smart Archive</strong> &ndash; Remembers the previous archive, and will only upload new photos &amp; videos, so it&rsquo;s <em>FAST</em>!</p></li>
<li><p><strong>Smart Photo View</strong> &ndash; Shows you your photos &amp; videos that are in danger of being lost forever (not archived), and the ones that are safe in the event that something happens to your device (archived).</p></li>
<li><p><strong>Full Resolution &amp; Metadata</strong> &ndash; Uploads your photos &amp; videos in their full resolution, with all metadata &ndash; information about your photos &amp; videos, e.g. where you took them.</p></li>
</ol>


<p>How does PhotoArchive work?</p>

<p>PhotoArchive archives to your home storage &ndash; NAS (Network Attached Storage) or Mac/PC, using FTP (File Transfer Protocol). Most NAS devices already support FTP, but if you are using a Mac/PC you will need an FTP server.</p>

<p>FTP should only be used on Wi-Fi with WPA2 security, with your storage on the same network. Don&rsquo;t do it over the Internet! Be security smart.</p>

<h2>Design thinking</h2>

<p>The main view that greets the user visually shows them all photos &amp; videos on their iOS device, grouped into state &ndash; not archived, or archived.
It first shows photos &amp; videos that are not archived (in danger of being lost forever), and then photos &amp; videos that are archived (safe).</p>

<p>The user can either setup their archive destination, or start archiving if already setup &amp; there are new photos or videos.</p>

<p>I took inspiration from the iOS Photos app, and show photos &amp; videos as varying square sizes.</p>

<p>The Not Archived section photos &amp; videos are shown as large squares up to a certain number, and then get smaller.
Large squares let you see the few photos &amp; videos that you haven&rsquo;t archived up close.
If there&rsquo;s lots, then they are shown as small squares to give you a visual sense of how many there are.
The section header is the PhotoArchive logo on red &ndash; danger!</p>

<p>The Archived section shows photos &amp; videos as small squares; they are safe, so you don&rsquo;t need to see what they are, just get a visual sense of how many there are.
The section header is the PhotoArchive logo on blue (this is the app icon) &ndash; safe.</p>

<p>The design allows both sections to appear together on the main view without much scrolling required.</p>

<h2>When will it be released</h2>

<p>PhotoArchive is functionally complete.
I&rsquo;m currently cleaning, polishing &amp; testing it.
It would be great to have a few testers, so if you&rsquo;d like to test it out &amp; are willing to provide feedback, then contact me at <a href="peter.boni@gmail.com">peter.boni@gmail.com</a>.</p>

<h2>The future</h2>

<p>Since the purpose of PhotoArchive is to save your irreplaceable memories, i&rsquo;ve thought about adding support for offsite archiving to cloud storage such as Amazon S3 or Glacier.</p>

<p>Amazon Glacier is attractive because of it&rsquo;s extreme lost cost &ndash; USD$0.01 per GB (gigabyte) per month.
That&rsquo;s just over USD$10 per month to archive 1TB (terabyte) of photos &amp; videos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobile Design Details: Hide/Show Passwords - iOS Implementation and Thoughts]]></title>
    <link href="http://www.peterboni.net/blog/2014/01/11/mobile-design-details-hide-show-passwords-ios-implementation-and-thoughts/"/>
    <updated>2014-01-11T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2014/01/11/mobile-design-details-hide-show-passwords-ios-implementation-and-thoughts</id>
    <content type="html"><![CDATA[<p>I read a tweet from Luke Wroblewski this morning, which lead to a blog post he
published on November 7, 2012 called <a href="http://www.lukew.com/ff/entry.asp?1653">Mobile Design Details: Hide/Show Passwords</a>.</p>

<p>The fact that I have to manually enter passwords on mobile has been a constant source
of frustration for me, with this only making it worse.
Sadly his advice has not caught on much with app/site designers &amp; developers.
I decided to see how hard it was to quickly implement on iOS with a few thoughts along the way.</p>

<!--more-->


<h2>Implementation</h2>

<p>It turns out it&rsquo;s very simple.</p>

<p>Using Xcode 5.0.2, do File &ndash; New &ndash; Project &ndash; Application: Single View Application.</p>

<p>Add a Text Field to the single <strong>View Controller</strong> in <strong>Main.storyboard</strong>. You can add
Placeholder text to give the user a visual indication of what they should be doing
with the field.</p>

<p>Create an Outlet Connection in <strong>ViewController.h</strong> called <strong>password</strong>, which should look
like this.</p>

<p>{% codeblock lang:objc %}
@interface ViewController : UIViewController</p>

<p>@property (weak, nonatomic) IBOutlet UITextField *password;</p>

<p>@end
{% endcodeblock %}</p>

<p>In <strong>ViewController.m</strong>, put the following code into <strong>viewDidLoad</strong>.</p>

<p>{% codeblock lang:objc %}
&ndash; (void)viewDidLoad
{</p>

<pre><code>[super viewDidLoad];

CGSize hideShowSize = [@"SHOWX" sizeWithAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:14.0f]}];
UIButton *hideShow = [[UIButton alloc] initWithFrame:CGRectMake(0, 0, hideShowSize.width, self.password.frame.size.height)];
[hideShow.titleLabel setFont:[UIFont systemFontOfSize:14.0f]];
[hideShow setTitle:@"HIDE" forState:UIControlStateNormal];
[hideShow setTitleColor:[UIColor grayColor] forState:UIControlStateNormal];
self.password.rightView = hideShow;
self.password.rightViewMode = UITextFieldViewModeAlways;
[hideShow addTarget:self action:@selector(hideShow:) forControlEvents:UIControlEventTouchUpInside];
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>And then create <strong>hideShow</strong>.</p>

<p>{% codeblock lang:objc %}
&ndash; (void)hideShow:(id)sender
{</p>

<pre><code>UIButton *hideShow = (UIButton *)self.password.rightView;
if (!self.password.secureTextEntry)
{
    self.password.secureTextEntry = YES;
    [hideShow setTitle:@"SHOW" forState:UIControlStateNormal];
}
else
{
    self.password.secureTextEntry = NO;
    [hideShow setTitle:@"HIDE" forState:UIControlStateNormal];
}
[self.password becomeFirstResponder];
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>You should get something like this.</p>

<p>{% img fancybox center /media/images/2014-01-11-mobile-design-details-hide-show-passwords-ios-implementation-and-thoughts/1.png 594 270 %}</p>

<p>You can immediately touch &amp; start entering your un-obfuscated password.</p>

<p>{% img fancybox center /media/images/2014-01-11-mobile-design-details-hide-show-passwords-ios-implementation-and-thoughts/2.png 594 270 %}</p>

<p>If you touch &lsquo;HIDE&rsquo; then your password is obfuscated, and similarly touching &lsquo;SHOW&rsquo; will
go back to your un-obfuscated password.</p>

<p>{% img fancybox center /media/images/2014-01-11-mobile-design-details-hide-show-passwords-ios-implementation-and-thoughts/3.png 594 270 %}</p>

<h2>Thoughts</h2>

<p>It&rsquo;s important to remember that we&rsquo;re simply toggling the iOS UITextField &lsquo;Secure&rsquo;
functionality, so when the UITextField is not secure, the user can copy the contents
of the UITextField.</p>

<p>Therefore you should <strong>only</strong> use this pattern in Sign Up &amp; Login views, <strong>not</strong> views
where you can view/edit account details for a service.</p>

<p>{% img fancybox center /media/images/2014-01-11-mobile-design-details-hide-show-passwords-ios-implementation-and-thoughts/4.png 594 270 %}</p>

<p>{% img fancybox center /media/images/2014-01-11-mobile-design-details-hide-show-passwords-ios-implementation-and-thoughts/5.png 594 270 %}</p>

<p>This still doesn&rsquo;t remove the frustration of having to manually enter passwords on mobile.
It would be great to see Apple take the lead with iOS, and extend the iCloud Keychain /
Safari Password AutoFill (and generator) features to native apps.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Cloud Backend using Node.js on AWS]]></title>
    <link href="http://www.peterboni.net/blog/2013/12/07/a-cloud-backend-using-nodejs-on-aws/"/>
    <updated>2013-12-07T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/12/07/a-cloud-backend-using-nodejs-on-aws</id>
    <content type="html"><![CDATA[<p>What?! You&rsquo;re building an awesome mobile app, like this one &ndash;
<a href="/blog/2013/06/29/ios-7-dynamic-type/">iOS 7 Dynamic Type</a>, and <a href="/blog/2013/06/24/ios-7-userxlistview/">iOS 7 UserXListView</a>,
and get to the point where you need a <em>backend</em>.
Oh no! Your complexity just increased exponentially.</p>

<p>Luckily the latest cloud computing XaaS (Everything as a service) is called a
<a href="http://en.wikipedia.org/wiki/Backend_as_a_service">BaaS</a> (Backend as a service).
BaaS offerings include <a href="https://parse.com">Parse</a> (which was acquired by Facebook earlier this year),
and the open source <a href="http://www.baasbox.com">BaasBox</a>.
The idea is that a BaaS abstracts the complexity of building a backend.</p>

<p>But is building a backend really all that difficult using cloud computing?
Let&rsquo;s find out &amp; build a cloud backend using <a href="http://nodejs.org">node.js</a> on <a href="http://aws.amazon.com">AWS</a>.
Let&rsquo;s get started.</p>

<!--more-->


<h2>Node.js</h2>

<p>First download &amp; install <a href="http://nodejs.org">Node.js</a>, which is a platform for building applications in JavaScript.
It&rsquo;s powered by the Google Chrome V8 JavaScript engine.</p>

<p>Isn&rsquo;t JavaScript slow? No!</p>

<blockquote><p>&ldquo;V8 compiles JavaScript source code directly into machine code when it is first executed.
There are no intermediate byte codes, no interpreter.&rdquo;, <a href="https://developers.google.com/v8/design">https://developers.google.com/v8/design</a></p></blockquote>

<p>Node.js is fast.</p>

<p>We&rsquo;re going to use Node.js &amp; node packages to expose web services for our awesome mobile app.</p>

<p>Why? There are lots of good articles that explain what Node.js is and what it&rsquo;s good for.
Here&rsquo;s my simple take:</p>

<ol>
<li>The web has changed from consumption (viewing web pages) to interaction (apps, social media, chat). We need better client/server technology.</li>
<li>Node.js is JavaScript on the server, which lowers the learning curve for developers.</li>
<li>Node.js has a strong open source community. NPM (Node Package Manager) is a repository
of reusable components. There are currently over 50 <em>thousand</em>, with over 3 <em>million</em> downloads per day.</li>
</ol>


<p>The goal is to build a cloud backend &ndash; expose a RESTful web API that supports OAuth 2.0, with a database.
This blog post should serve as the foundation to start you on that journey.</p>

<p>We will be using OS X Mavericks (Version 10.9), Terminal, and <a href="http://www.barebones.com/products/textwrangler/">TextWrangler</a>
which is available free from the App Store.</p>

<p>Create &amp; change to a new folder called <strong>cloudbackend</strong> from your Documents folder.</p>

<p>{% codeblock lang:console %}
peters-mac-mini:Documents peterboni$ mkdir cloudbackend
peters-mac-mini:Documents peterboni$ cd cloudbackend/
peters-mac-mini:cloudbackend peterboni$
{% endcodeblock %}</p>

<p>Create a file called <strong>package.json</strong> and put the following JSON data object in it.</p>

<p>{% codeblock lang:javascript %}
{
  &ldquo;name&rdquo;: &ldquo;cloudbackend&rdquo;,
  &ldquo;description&rdquo;: &ldquo;&rdquo;,
  &ldquo;version&rdquo;: &ldquo;0.0.1&rdquo;,
  &ldquo;private&rdquo;: true,
  &ldquo;scripts&rdquo;: {</p>

<pre><code>"start": "node app"
</code></pre>

<p>  },
  &ldquo;dependencies&rdquo;: {</p>

<pre><code>"express": "3.x"
</code></pre>

<p>  }
}
{% endcodeblock %}</p>

<p>Use npm (Node Package Manager) to install <a href="http://expressjs.com">Express</a>, which is the
dependency you identified in the above package.json file. Express is a web
application framework. Enter &lsquo;npm install&rsquo;.</p>

<p>{% codeblock lang:console %}
peters-mac-mini:cloudbackend peterboni$ npm install
npm http GET <a href="https://registry.npmjs.org/express">https://registry.npmjs.org/express</a>
&hellip;
<a href="&#109;&#x61;&#x69;&#108;&#x74;&#x6f;&#x3a;&#101;&#120;&#112;&#114;&#x65;&#x73;&#x73;&#x40;&#x33;&#46;&#x34;&#x2e;&#x36;">&#101;&#x78;&#112;&#114;&#x65;&#115;&#115;&#x40;&#51;&#x2e;&#x34;&#46;&#x36;</a> node_modules/express
├── <a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#58;&#109;&#101;&#x74;&#x68;&#111;&#100;&#115;&#64;&#x30;&#x2e;&#x31;&#x2e;&#x30;">&#x6d;&#101;&#116;&#x68;&#111;&#x64;&#x73;&#64;&#48;&#46;&#x31;&#46;&#x30;</a>
&hellip;
└── <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x63;&#111;&#x6e;&#x6e;&#101;&#x63;&#116;&#x40;&#50;&#x2e;&#49;&#x31;&#x2e;&#50;">&#x63;&#111;&#110;&#110;&#101;&#99;&#116;&#x40;&#x32;&#x2e;&#49;&#x31;&#46;&#x32;</a> (uid2@0.0.3, pause@0.0.1, qs@0.6.5, bytes@0.2.1, raw-body@1.1.2, negotiator@0.3.0, <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#111;&#x3a;&#x6d;&#x75;&#x6c;&#x74;&#105;&#112;&#x61;&#x72;&#116;&#121;&#64;&#50;&#46;&#x32;&#46;&#48;">&#x6d;&#x75;&#x6c;&#x74;&#x69;&#112;&#x61;&#114;&#x74;&#x79;&#64;&#x32;&#46;&#50;&#46;&#48;</a>)
peters-mac-mini:cloudbackend peterboni$
{% endcodeblock %}</p>

<p>Create a file called <strong>app.js</strong> with the following content.
All we are doing here is exposing one HTTP GET method request, available at &lsquo;/test&rsquo;,
which returns a JSON data object. A simple test.</p>

<p>{% codeblock lang:javascript %}
var express = require(&lsquo;express&rsquo;),</p>

<pre><code>http = require('http');
</code></pre>

<p>var app = express();</p>

<p>app.set(&lsquo;port&rsquo;, process.env.PORT || 3000);</p>

<p>app.get(&lsquo;/test&rsquo;, function(req, res) {
  res.json({&lsquo;message&rsquo;:&lsquo;hi&rsquo;});
});</p>

<p>http.createServer(app).listen(app.get(&lsquo;port&rsquo;), function() {
  console.log(&ldquo;Cloudbackend listening on port &rdquo; + app.get(&lsquo;port&rsquo;));
});
{% endcodeblock %}</p>

<p>Let&rsquo;s test it!
Enter &lsquo;node app&rsquo;.</p>

<p>{% codeblock lang:console %}
peters-mac-mini:cloudbackend peterboni$ node app
Cloudbackend listening on port 3000
{% endcodeblock %}</p>

<p>Now open your favourite web browser, and navigate to <a href="http://localhost:3000/test">http://localhost:3000/test</a></p>

<p>{% img fancybox center /media/images/2013-12-07-a-cloud-backend-using-nodejs-on-aws/1-node-app.png 914 468 %}</p>

<p>Congratulations! You&rsquo;ve just successfully built a RESTful web API with a single <em>resource</em>
called <em>test</em> which is responding to a HTTP GET method request, and is returning a
JSON data object.</p>

<p>Let&rsquo;s deploy our backend to the cloud.</p>

<h2>AWS</h2>

<p>With <a href="http://aws.amazon.com">AWS</a> (Amazon Web Services) we can easily deploy our backend to the cloud while
still keeping flexibility &amp; control &ndash; things that a BaaS takes away by abstracting the complexity.</p>

<p>First sign up for the very generous <a href="http://aws.amazon.com/free/">AWS Free Usage Tier</a>.
This simple tutorial should not result in charges to your account.</p>

<p>We are going to deploy <strong>cloudbackend</strong> as an Application into EB (<a href="http://aws.amazon.com/elasticbeanstalk/">Elastic Beanstalk</a>)
which is an AWS <em>Application Container</em>. The <a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/concepts.concepts.architecture.html">Architectural Overview</a> shows &amp;
explains what Elastic Beanstalk is.</p>

<ol>
<li>You deploy your application to EB and it gets a unique URL &ndash; <a href="http://myapp.elasticbeanstalk.com">http://myapp.elasticbeanstalk.com</a></li>
<li>An Auto Scaling Group is created with at least 1 <a href="http://aws.amazon.com/ec2/">EC2</a> Instance (basically a VM &ndash; Virtual Machine).</li>
<li>Traffic to your application URL first goes through the ELB (Elastic Load Balancer), and then to an EC2 Instance.</li>
</ol>


<p>Once setup all AWS resources are automatically provisioned &amp; configured.
You have a fully <strong>auto load balanced, auto scaled cloud application environment</strong>.</p>

<p>Next, download &amp; install <a href="http://git-scm.com/">Git</a>.</p>

<p>Initialise your <strong>cloudbackend</strong> Git repository. Enter &lsquo;git init&rsquo;, followed by
the other commands in the following console code block.</p>

<p>{% codeblock lang:console %}
peters-mac-mini:cloudbackend peterboni$ git init
Initialized empty Git repository in /Users/peterboni/Documents/cloudbackend/.git/
peters-mac-mini:cloudbackend peterboni$ cat > .gitignore &lt;&lt;EOT
node_modules/
.gitignore
.elasticbeanstalk/
EOT
peters-mac-mini:cloudbackend peterboni$ git add .
peters-mac-mini:cloudbackend peterboni$ git commit -m &ldquo;initial app&rdquo;
[master (root-commit) 889e876] initial app
 2 files changed, 26 insertions(+)
 create mode 100644 app.js
 create mode 100644 package.json
peters-mac-mini:cloudbackend peterboni$
{% endcodeblock %}</p>

<p>Next download &amp; extract the <a href="http://aws.amazon.com/code/6752709412171743">AWS Elastic Beanstalk Command Line Tool</a> to
your Documents folder (the cloudbackend folder should be in your Documents folder).</p>

<p>Next add the appropriate EB Python folder to your PATH.</p>

<p>{% codeblock lang:console %}
peters-mac-mini:cloudbackend peterboni$ export PATH=$PATH:/Users/peterboni/Documents/AWS-ElasticBeanstalk-CLI-2.5.1/eb/macosx/python2.7/
peters-mac-mini:cloudbackend peterboni$
{% endcodeblock %}</p>

<p>If you have OS X Mavericks (Version 10.9) then you already have Python 2.7.5, else you
will need to download &amp; install it.</p>

<p>Next we&rsquo;re going to create &amp; configure the <strong>cloudbackend</strong> AWS Elastic Beanstalk
Application Container. You basically enter &lsquo;eb init&rsquo; and then follow the prompts.</p>

<ol>
<li>You will need to enter your AWS Access Key ID and Secret Access Key, which
can be found at the URL given after you enter &lsquo;eb init&rsquo;.</li>
<li>Select an AWS service region. I entered &lsquo;7&rsquo; for &lsquo;Asia Pacific (Sydney)&rsquo;.</li>
<li>Accept the default application &amp; environment names by pressing return.</li>
<li>Enter &lsquo;8&rsquo;, for &lsquo;64bit Amazon Linux 2013.09 running Node.js&rsquo;.</li>
<li>Enter &lsquo;1&rsquo;, for &lsquo;LoadBalanced&rsquo;.</li>
<li>Enter &lsquo;n&rsquo;, to skip creating an &lsquo;RDS DB Instance&rsquo;.</li>
<li>Enter &lsquo;1&rsquo;, for &lsquo;Create a default instance profile&rsquo;.</li>
</ol>


<p>{% codeblock lang:console %}
peters-mac-mini:cloudbackend peterboni$ eb init
To get your AWS Access Key ID and Secret Access Key,
  visit &ldquo;<a href="https://aws-portal.amazon.com/gp/aws/securityCredentials">https://aws-portal.amazon.com/gp/aws/securityCredentials</a>&rdquo;.
Enter your AWS Access Key ID (current value is &ldquo;AKIAJ<strong><strong><em>GBOHQ&rdquo;): [enter yours here]
Enter your AWS Secret Access Key (current value is &ldquo;MhYxu</em></strong></strong>rJfZx&rdquo;): [enter yours here]
Select an AWS Elastic Beanstalk service region.
Available service regions are:
1) US East (Virginia)
2) US West (Oregon)
3) US West (North California)
4) EU West (Ireland)
5) Asia Pacific (Singapore)
6) Asia Pacific (Tokyo)
7) Asia Pacific (Sydney)
8) South America (Sao Paulo)
Select (1 to 8): 7
Enter an AWS Elastic Beanstalk application name (auto-generated value is &ldquo;cloudbackend&rdquo;):
Enter an AWS Elastic Beanstalk environment name (auto-generated value is &ldquo;cloudbackend-env&rdquo;):
Select a solution stack.
Available solution stacks are:
1) 32bit Amazon Linux 2013.09 running PHP 5.4
2) 64bit Amazon Linux 2013.09 running PHP 5.4
3) 32bit Amazon Linux 2013.09 running PHP 5.5
4) 64bit Amazon Linux 2013.09 running PHP 5.5
5) 32bit Amazon Linux running PHP 5.3
6) 64bit Amazon Linux running PHP 5.3
7) 32bit Amazon Linux 2013.09 running Node.js
8) 64bit Amazon Linux 2013.09 running Node.js
&hellip;
Select (1 to 28): 8
Select an environment type.
Available environment types are:
1) LoadBalanced
2) SingleInstance
Select (1 to 2): 1
Create an RDS DB Instance? [y/n]: n
Attach an instance profile (current value is &ldquo;[Create a default instance profile]&rdquo;):
1) [Create a default instance profile]
2) aws-elasticbeanstalk-ec2-role
3) [Other instance profile]
Select (1 to 3): 1
Updated AWS Credential file at &ldquo;/Users/peterboni/.elasticbeanstalk/aws_credential_file&rdquo;.</p>

<p>peters-mac-mini:cloudbackend peterboni$
{% endcodeblock %}</p>

<p>Now we just start it. Be patient as this will take a few minutes.</p>

<ol>
<li>Enter &lsquo;eb start&rsquo;.</li>
<li>Enter &lsquo;y&rsquo;, to &lsquo;deploy the latest Git commit to your environment&rsquo;.</li>
</ol>


<p>{% codeblock lang:console %}
peters-mac-mini:cloudbackend peterboni$ eb start
Starting application &ldquo;cloudbackend&rdquo;.
Would you like to deploy the latest Git commit to your environment? [y/n]: y
remote:
remote: error: Unable to deploy application version: No Environment found for EnvironmentName = &lsquo;cloudbackend-env&rsquo;.
remote:
To <a href="https://...:...@git.elasticbeanstalk.ap-southeast-2.amazonaws.com/v1/repos/.../commitid/.../environment/...">https://...:...@git.elasticbeanstalk.ap-southeast-2.amazonaws.com/v1/repos/.../commitid/.../environment/...</a>
 * [new branch]      HEAD &ndash;> master</p>

<p>Waiting for environment &ldquo;cloudbackend-env&rdquo; to launch.
2013-12-07 08:21:09 INFO    createEnvironment is starting.
2013-12-07 08:21:14 INFO    Using elasticbeanstalk-ap-southeast-2-558573496878 as Amazon S3 storage bucket for environment data.
2013-12-07 08:21:46 INFO    Created load balancer named: awseb-e-i-AWSEBLoa-SNLC5NAHWZWP
2013-12-07 08:22:06 INFO    Created security group named: awseb-e-ib22smbwaz-stack-AWSEBSecurityGroup-1DE3TWOH4AYLK
2013-12-07 08:22:10 INFO    Created Auto Scaling launch configuration named: awseb-e-ib22smbwaz-stack-AWSEBAutoScalingLaunchConfiguration-1NPGUDUWIC5YP
2013-12-07 08:23:07 INFO    Waiting for EC2 instances to launch. This may take a few minutes.
2013-12-07 08:23:07 INFO    Created Auto Scaling group named: awseb-e-ib22smbwaz-stack-AWSEBAutoScalingGroup-1BTN5S4LQA5BD
2013-12-07 08:23:10 INFO    Created Auto Scaling group policy named: arn:aws:autoscaling:ap-southeast-2:558573496878:scalingPolicy:5c8b171d-262b-4286-8bbd-76ff9db15845:autoScalingGroupName/awseb-e-ib22smbwaz-stack-AWSEBAutoScalingGroup-1BTN5S4LQA5BD:policyName/awseb-e-ib22smbwaz-stack-AWSEBAutoScalingScaleDownPolicy-18LWCZMRA7I4G
2013-12-07 08:23:11 INFO    Created Auto Scaling group policy named: arn:aws:autoscaling:ap-southeast-2:558573496878:scalingPolicy:d9a9f3df-b813-4ffe-9556-f2a7136aa69d:autoScalingGroupName/awseb-e-ib22smbwaz-stack-AWSEBAutoScalingGroup-1BTN5S4LQA5BD:policyName/awseb-e-ib22smbwaz-stack-AWSEBAutoScalingScaleUpPolicy-ZSDGPZ6KHCRQ
2013-12-07 08:23:14 INFO    Created CloudWatch alarm named: awseb-e-ib22smbwaz-stack-AWSEBCloudwatchAlarmHigh-1AAZW8L054YWY
2013-12-07 08:23:14 INFO    Created CloudWatch alarm named: awseb-e-ib22smbwaz-stack-AWSEBCloudwatchAlarmLow-1OAGDWAQFGJTO
2013-12-07 08:27:02 INFO    Successfully launched environment: cloudbackend-env
Application is available at &ldquo;cloudbackend-env-yey9npuvjz.elasticbeanstalk.com&rdquo;.
peters-mac-mini:cloudbackend peterboni$
{% endcodeblock %}</p>

<p>Let&rsquo;s test it!</p>

<p>Open your favourite web browser, and navigate to <a href="http://cloudbackend-env-yey9npuvjz.elasticbeanstalk.com/test">http://cloudbackend-env-yey9npuvjz.elasticbeanstalk.com/test</a></p>

<blockquote><p>Replace the domain part of the above URL with the domain you were given at the end of the &lsquo;eb start&rsquo; process &hellip;
Application is available at &ldquo;cloudbackend-env-*.elasticbeanstalk.com&rdquo;.</p></blockquote>

<p>{% img fancybox center /media/images/2013-12-07-a-cloud-backend-using-nodejs-on-aws/2-node-app.png 1138 714 %}</p>

<p><strong>Congratulations! Your cloud backend is now working.</strong></p>

<p>Now to work on that awesome mobile app!</p>

<p>Lastly if you want to stop &amp; delete the environment, use the following EB command.
Enter &lsquo;eb stop&rsquo;, and then &lsquo;y&rsquo; to terminate the environment.</p>

<p>{% codeblock lang:console %}
peters-mac-mini:cloudbackend peterboni$ eb stop
Terminate environment? [y/n]: y
Stopping environment &ldquo;cloudbackend-env&rdquo;. This may take a few minutes.
2013-12-07 09:24:44 INFO    terminateEnvironment is starting.
2013-12-07 09:24:57 INFO    Deleted CloudWatch alarm named: awseb-e-ib22smbwaz-stack-AWSEBCloudwatchAlarmLow-1OAGDWAQFGJTO
2013-12-07 09:24:57 INFO    Deleted CloudWatch alarm named: awseb-e-ib22smbwaz-stack-AWSEBCloudwatchAlarmHigh-1AAZW8L054YWY
2013-12-07 09:25:00 INFO    Deleted Auto Scaling group policy named: arn:aws:autoscaling:ap-southeast-2:558573496878:scalingPolicy:d9a9f3df-b813-4ffe-9556-f2a7136aa69d:autoScalingGroupName/awseb-e-ib22smbwaz-stack-AWSEBAutoScalingGroup-1BTN5S4LQA5BD:policyName/awseb-e-ib22smbwaz-stack-AWSEBAutoScalingScaleUpPolicy-ZSDGPZ6KHCRQ
2013-12-07 09:25:00 INFO    Deleted Auto Scaling group policy named: arn:aws:autoscaling:ap-southeast-2:558573496878:scalingPolicy:5c8b171d-262b-4286-8bbd-76ff9db15845:autoScalingGroupName/awseb-e-ib22smbwaz-stack-AWSEBAutoScalingGroup-1BTN5S4LQA5BD:policyName/awseb-e-ib22smbwaz-stack-AWSEBAutoScalingScaleDownPolicy-18LWCZMRA7I4G
2013-12-07 09:25:03 INFO    Waiting for EC2 instances to terminate. This may take a few minutes.
2013-12-07 09:26:15 INFO    Deleted Auto Scaling group named: awseb-e-ib22smbwaz-stack-AWSEBAutoScalingGroup-1BTN5S4LQA5BD
2013-12-07 09:26:19 INFO    Deleted Auto Scaling launch configuration named: awseb-e-ib22smbwaz-stack-AWSEBAutoScalingLaunchConfiguration-1NPGUDUWIC5YP
2013-12-07 09:26:22 INFO    Deleted security group named: awseb-e-ib22smbwaz-stack-AWSEBSecurityGroup-1DE3TWOH4AYLK
2013-12-07 09:26:25 INFO    Deleted load balancer named: awseb-e-i-AWSEBLoa-SNLC5NAHWZWP
2013-12-07 09:26:28 INFO    Deleting SNS topic for environment cloudbackend-env.
Stop of environment &ldquo;cloudbackend-env&rdquo; has completed.
peters-mac-mini:cloudbackend peterboni$
{% endcodeblock %}</p>

<p>If you get stuck, you can always try checking out the Amazon documentation &ndash;
<a href="http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_nodejs_express.html">Deploying an Express Application to AWS Elastic Beanstalk</a>.</p>

<p>I may cover topics like adding a custom domain name, SSL, OAuth 2.0 support, a
database, or web pages to your cloud backend in future posts if there is interest.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Formatted Currency Input]]></title>
    <link href="http://www.peterboni.net/blog/2013/07/04/ios-formatted-currency-input/"/>
    <updated>2013-07-04T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/07/04/ios-formatted-currency-input</id>
    <content type="html"><![CDATA[<p>You&rsquo;re building an iOS app, and need the user to enter a money value. You start by using
a UITextField. If you want a basic user experience, then you&rsquo;re done.</p>

<p>If you want to give the user <em>something better</em>, then the pain begins. The pain is worth
it because <strong>small details matter</strong>. I&rsquo;ve taken ideas from a few places &amp; combined them
into this experience &amp; open source code.</p>

<!--more-->


<h2>The Experience in 9 images</h2>

<p>1. We start &amp; sit there, begging the user to enter something. We&rsquo;re showing $0.00, so we have
sent a signal to them that they are entering a money value. The cursor is flashing at them
after the last 0 at the end of the formatted money value.</p>

<p>{% img fancybox center /media/images/2013-07-04-ios-formatted-currency-input/1.png 396 744 Start, Shows $0.00 %}</p>

<p>2. The user taps the 1 key on the number pad. The display value changes to $0.01</p>

<p>{% img fancybox center /media/images/2013-07-04-ios-formatted-currency-input/2.png 396 744 Tap 1, Changes to $0.01 %}</p>

<p>3. The user taps the 2 key on the number pad. The display value changes to $0.12</p>

<p>{% img fancybox center /media/images/2013-07-04-ios-formatted-currency-input/3.png 396 744 Tap 2, Changes to $0.12 %}</p>

<p>4. The user taps the 3 key on the number pad. The display value changes to $1.23</p>

<p>They haven&rsquo;t had to enter in a dot. They are just tapping numbers, and the displayed
money value is formatting itself in front of their eyes.</p>

<p>{% img fancybox center /media/images/2013-07-04-ios-formatted-currency-input/4.png 396 744 Tap 3, Changes to $1.23 %}</p>

<p>5. The user taps some more numbers &ndash; 4, 5, and then 6. The display value changes to $1,234.56</p>

<p>We have a comma! The money value is formatted.</p>

<p>{% img fancybox center /media/images/2013-07-04-ios-formatted-currency-input/5.png 396 744 Tap 4, 5, 6, Changes to $1,234.56 %}</p>

<p>6. The user taps Delete. The display value changes to $123.45</p>

<p>{% img fancybox center /media/images/2013-07-04-ios-formatted-currency-input/6.png 396 744 Tap Delete, Deletes 6 %}</p>

<p>7. The user moves the cursor to after 1, taps Delete. The display value changes to $23.45</p>

<p>{% img fancybox center /media/images/2013-07-04-ios-formatted-currency-input/7.png 396 744 Move cursor to after 1, and Tap Delete, Deletes 1 %}</p>

<p>8. From start the user gets ready to paste in &lsquo;$1,000&rsquo; (without quotes) from somewhere else.</p>

<p>{% img fancybox center /media/images/2013-07-04-ios-formatted-currency-input/8.png 396 744 From Start, Get ready to Paste $1,000 %}</p>

<p>9. The &lsquo;$1,000&rsquo; gets pasted in &amp; the display value changes to $1,000.00.</p>

<p>Note that the display value didn&rsquo;t change to $10.00, which would have happened if we
didn&rsquo;t trap the paste and format the value before updating the display value.</p>

<p>Also note that the user could also paste in &lsquo;1000&rsquo; or &lsquo;$1000&rsquo;.</p>

<p>{% img fancybox center /media/images/2013-07-04-ios-formatted-currency-input/9.png 396 744 Paste in $1,000, Changes to $1,000.00 %}</p>

<h2>The Code</h2>

<p>Go get it &ndash; <a href="https://github.com/peterboni/FormattedCurrencyInput">FormattedCurrencyInput on GitHub</a>.<br/>
Fork it, or submit a Pull Request, and let&rsquo;s make it better for others together!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 7 Dynamic Type]]></title>
    <link href="http://www.peterboni.net/blog/2013/06/29/ios-7-dynamic-type/"/>
    <updated>2013-06-29T07:00:00+08:00</updated>
    <id>http://www.peterboni.net/blog/2013/06/29/ios-7-dynamic-type</id>
    <content type="html"><![CDATA[<p>iOS 7 introduces Dynamic Type, which if apps choose to support it, gives the user
control over text size in an app. Web pages have had this feature for free since the early
days of the web, but web browsers moved away from dynamic text sizing.
<a href="http://www.codinghorror.com/blog/2009/01/the-two-types-of-browser-zoom.html">The Two Types of Browser Zoom</a>.</p>

<p>iOS7 Dynamic Type automatically adjusts weight, letter spacing, and line height for every font
size. It looks <strong>stunning</strong>, but there&rsquo;s work to make your app support it.</p>

<!--more-->


<h2>Default Size</h2>

<p>Here&rsquo;s what <a href="/blog/2013/06/24/ios-7-userxlistview/">UserXListView</a> looks like with the Text Size
(Settings &ndash; General &ndash; Text Size) set to the default size in the <em>iPhone Retina (3.5-inch)</em>
iOS Simulator.</p>

<p>{% img fancybox center /media/images/2013-06-29-ios-7-dynamic-type/1-text-size-normal.png 500 713 Text Size Default %}</p>

<p>We get 3 &amp; &lsquo;a bit&rsquo; cells in the UITableView.</p>

<p>{% img fancybox center /media/images/2013-06-29-ios-7-dynamic-type/2-userxlistview-normal.png 500 713 UserXListView Default %}</p>

<h2>Smallest Size</h2>

<p>Changing the Text Size to the smallest size means we can fit slightly more.</p>

<p>{% img fancybox center /media/images/2013-06-29-ios-7-dynamic-type/3-text-size-small.png 500 713 Text Size Smallest %}</p>

<p>Nearly 4 cells in the UITableView.</p>

<p>{% img fancybox center /media/images/2013-06-29-ios-7-dynamic-type/4-userxlistview-small.png 500 713 UserXListView Smallest %}</p>

<h2>Largest Size</h2>

<p>Changing the Text Size to the largest size means we can fit slightly less, but get big
beautiful type.</p>

<p>{% img fancybox center /media/images/2013-06-29-ios-7-dynamic-type/5-text-size-large.png 500 713 Text Size Largest %}</p>

<p>3 cells in the UITableView.</p>

<p>{% img fancybox center /media/images/2013-06-29-ios-7-dynamic-type/6-userxlistview-large.png 500 713 UserXListView Largest %}</p>

<h2>Implementation, The Easy Part</h2>

<p>That&rsquo;s how it looks, but how hard is it to make your app support it. Let&rsquo;s look at
<a href="/blog/2013/06/24/ios-7-userxlistview/">UserXListView</a>. The cell layout makes use of Auto
Layout Constraints, which are very powerful.</p>

<p>{% img fancybox center /media/images/2013-06-29-ios-7-dynamic-type/7-userxlistview-cell-layout.png 381 674 UserXListView Cell Layout %}</p>

<p>iOS 7 has defined Text Styles &ndash; Body, Caption 1, Caption 2, Footnote, Headline 1,
Headline 2, Subhead 1, and Subhead 2. We assign a Text Style to each label in the cell
layout via the attribute inspector as shown below.</p>

<p>{% img fancybox center /media/images/2013-06-29-ios-7-dynamic-type/8-userxlistview-cell-label-attribute-inspector.png 316 196 UserXListView Cell Label Attribute Inspector %}</p>

<p>Once the label Text Styles &amp; Auto Layout Constraints are set, we&rsquo;re ready for the hard
part.</p>

<h2>Implementation, The Hard Part</h2>

<p>Unlike Auto Layout in this example, there&rsquo;s more work to do to support
Dynamic Type.</p>

<p>We need to make the Controller aware of a Text Size change by hooking into the
UIContentSizeCategoryDidChangeNotification.</p>

<p>{% codeblock lang:objc %}
&ndash; (void)viewDidLoad {</p>

<pre><code>[super viewDidLoad];
[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(preferredContentSizeChanged:) name:UIContentSizeCategoryDidChangeNotification object:nil];
</code></pre>

<p>}</p>

<ul>
<li><p>(void)preferredContentSizeChanged:(NSNotification *)aNotification {
  // adjust the layout of the cells
  [self.view setNeedsLayout];</p>

<p>  // refresh view&hellip;
}
{% endcodeblock %}</p></li>
</ul>


<p>We need to calculate the height of the row/cell based on it&rsquo;s content, and as each label
in the cell can change height we need to calculate the total height of the cell required.</p>

<p>{% codeblock lang:objc %}
&ndash; (CGFloat)tableView:(UITableView <em>)tableView heightForRowAtIndexPath:(NSIndexPath </em>)indexPath {</p>

<pre><code>Account *account = [self.fetchedResultsController objectAtIndexPath:indexPath];

UIFont *nameLabelFont = [UIFont preferredFontForTextStyle:UIFontTextStyleHeadline1];
CGSize nameLabelFontSize = [[account name] sizeWithAttributes:[NSDictionary dictionaryWithObject:nameLabelFont forKey:NSFontAttributeName]];

// ...

CGFloat PADDING_OUTER = 10;
CGFloat totalHeight = PADDING_OUTER + nameLabelFontSize.height + ... + PADDING_OUTER;

return totalHeight;
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>We also need to programmatically assign (or re-assign because we already did it in
the Storyboard) the cell label Text Style values.</p>

<p>{% codeblock lang:objc %}
&ndash; (UITableViewCell <em>)tableView:(UITableView </em>)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {</p>

<pre><code>AccountCell *cell = (AccountCell *)[tableView dequeueReusableCellWithIdentifier:@"AccountCell"];

Account *account = [self.fetchedResultsController objectAtIndexPath:indexPath];

cell.nameLabel.text = [account name];
cell.nameLabel.font = [UIFont preferredFontForTextStyle:UIFontTextStyleHeadline1];

// ...
</code></pre>

<p>}
{% endcodeblock %}</p>

<h2>Final Thoughts</h2>

<p>That&rsquo;s it. iOS 7 determines &amp; applies the font attributes for each label based on the
Text Style for each label, and the iOS 7 Text Size system setting selected by the user,
and it&rsquo;s left to us (the developer) to cater for the changes in the layout to the view.</p>

<p>As you can see there&rsquo;s a bit of extra work to support Dynamic Type. It would be nice if
it was a bit smarter, a bit more automatic, but with great power comes great responsibility.</p>
]]></content>
  </entry>
  
</feed>
